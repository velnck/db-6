-- TABLES
DROP TABLE organization;
DROP TABLE departments;
DROP TABLE employees;
DROP TABLE organization_logs;
DROP TABLE departments_logs;
DROP TABLE employees_logs;
DROP TABLE reports_logs;

ALTER SESSION SET NLS_LANGUAGE = 'ENGLISH';


CREATE TABLE organization (
    organization_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    organization_name VARCHAR2(20) NOT NULL,
    creation_date timestamp,
    CONSTRAINT organization_id_pk PRIMARY KEY (organization_id)
);

CREATE TABLE departments (
    dep_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    dep_name VARCHAR2(20) NOT NULL,
    organization_id NUMBER NOT NULL,
    creation_date timestamp,
    CONSTRAINT dep_id_pk PRIMARY KEY (dep_id)
);

CREATE TABLE employees (
    emp_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    emp_name VARCHAR2(20) NOT NULL,
    dep_id NUMBER NOT NULL,
    enter_date timestamp,
    CONSTRAINT emp_id_pk PRIMARY KEY (emp_id)
);


-- LOGS
CREATE TABLE organization_logs (
    action_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    organization_id NUMBER NOT NULL,
    organization_name VARCHAR2(20) NOT NULL,
    creation_date timestamp,
    change_date timestamp,
    change_type VARCHAR2(6),
    CONSTRAINT organization_logs_id_pk PRIMARY KEY (action_id)
);

CREATE TABLE departments_logs (
    action_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    dep_id NUMBER NOT NULL,
    dep_name VARCHAR2(20) NOT NULL,
    organization_id NUMBER NOT NULL,
    creation_date timestamp,
    change_date timestamp,
    change_type VARCHAR2(6),
    CONSTRAINT dep_logs_id_pk PRIMARY KEY (action_id)
);

CREATE TABLE employees_logs (
    action_id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    emp_id NUMBER NOT NULL,
    emp_name VARCHAR2(20) NOT NULL,
    dep_id NUMBER NOT NULL,
    enter_date timestamp,
    change_date timestamp,
    change_type VARCHAR2(6),
    CONSTRAINT emp_logs_id_pk PRIMARY KEY (action_id)
);

CREATE TABLE reports_logs (
    id NUMBER GENERATED ALWAYS AS IDENTITY,
    report_date timestamp,
    CONSTRAINT pk_reports_logs PRIMARY KEY (id)
);

-- TRIGGERS LOGS
CREATE
OR REPLACE TRIGGER tr_organization
AFTER
INSERT
    OR
UPDATE
    OR DELETE ON organization FOR EACH ROW BEGIN IF inserting THEN
INSERT INTO
    organization_logs (
        organization_id,
        organization_name,
        creation_date,
        change_date,
        change_type
    )
VALUES
    (
        :new.organization_id,
        :new.organization_name,
        :new.creation_date,
        systimestamp,
        'INSERT'
    );

ELSIF deleting THEN
INSERT INTO
    organization_logs (
        organization_id,
        organization_name,
        creation_date,
        change_date,
        change_type
    )
VALUES
    (
        :old.organization_id,
        :old.organization_name,
        :old.creation_date,
        systimestamp,
        'DELETE'
    );

ELSIF updating THEN
INSERT INTO
    organization_logs (
        organization_id,
        organization_name,
        creation_date,
        change_date,
        change_type
    )
VALUES
    (
        :new.organization_id,
        :new.organization_name,
        :new.creation_date,
        systimestamp,
        'UPDATE'
    );

END IF;

END;
/

CREATE
OR REPLACE TRIGGER tr_departments
AFTER
INSERT
    OR
UPDATE
    OR DELETE ON departments FOR EACH ROW BEGIN IF inserting THEN
INSERT INTO
    departments_logs (
        dep_id,
        dep_name,
        organization_id,
        creation_date,
        change_date,
        change_type
    )
VALUES
    (
        :new.dep_id,
        :new.dep_name,
        :new.organization_id,
        :new.creation_date,
        systimestamp,
        'INSERT'
    );

ELSIF deleting THEN
INSERT INTO
    departments_logs (
        dep_id,
        dep_name,
        organization_id,
        creation_date,
        change_date,
        change_type
    )
VALUES
    (
        :old.dep_id,
        :old.dep_name,
        :old.organization_id,
        :old.creation_date,
        systimestamp,
        'DELETE'
    );

ELSIF updating THEN
INSERT INTO
    departments_logs (
        dep_id,
        dep_name,
        organization_id,
        creation_date,
        change_date,
        change_type
    )
VALUES
    (
        :new.dep_id,
        :new.dep_name,
        :new.organization_id,
        :new.creation_date,
        systimestamp,
        'UPDATE'
    );

END IF;

END;
/

CREATE
OR REPLACE TRIGGER tr_employees
AFTER
INSERT
    OR
UPDATE
    OR DELETE ON employees FOR EACH ROW BEGIN IF inserting THEN
INSERT INTO
    employees_logs (
        emp_id,
        emp_name,
        dep_id,
        enter_date,
        change_date,
        change_type
    )
VALUES
    (
        :new.emp_id,
        :new.emp_name,
        :new.dep_id,
        :new.enter_date,
        systimestamp,
        'INSERT'
    );

ELSIF deleting THEN
INSERT INTO
    employees_logs (
        emp_id,
        emp_name,
        dep_id,
        enter_date,
        change_date,
        change_type
    )
VALUES
    (
        :old.emp_id,
        :old.emp_name,
        :old.dep_id,
        :old.enter_date,
        systimestamp,
        'DELETE'
    );

ELSIF updating THEN
INSERT INTO
    employees_logs (
        emp_id,
        emp_name,
        dep_id,
        enter_date,
        change_date,
        change_type
    )
VALUES
    (
        :new.emp_id,
        :new.emp_name,
        :new.dep_id,
        :new.enter_date,
        systimestamp,
        'UPDATE'
    );

END IF;

END;
/

-- TIMESTAMP PACKAGE
CREATE
OR REPLACE PACKAGE cur_state_timestamp_pkg IS cur_state_time timestamp;

PROCEDURE set_time(p_value IN TIMESTAMP);

END cur_state_timestamp_pkg;
/

CREATE
OR REPLACE PACKAGE BODY cur_state_timestamp_pkg IS PROCEDURE set_time(p_value IN TIMESTAMP) IS BEGIN cur_state_time := p_value;

END set_time;

END cur_state_timestamp_pkg;
/

-- MAIN PACKAGE
CREATE
OR REPLACE PACKAGE func_package IS PROCEDURE roll_back(date_time TIMESTAMP);

PROCEDURE roll_back(date_time NUMBER);

PROCEDURE report(t_begin IN TIMESTAMP);

PROCEDURE report;

END func_package;
/

create
OR REPLACE PACKAGE BODY func_package IS PROCEDURE roll_back(date_time TIMESTAMP) IS BEGIN rollback_by_date(date_time);

END roll_back;

PROCEDURE roll_back(date_time NUMBER) IS BEGIN DECLARE current_time timestamp := systimestamp;

BEGIN current_time := current_time - numtodsinterval(date_time / 1000, 'SECOND');

rollback_by_date(current_time);

END;

END roll_back;

PROCEDURE report(t_begin IN TIMESTAMP) IS v_cur timestamp := systimestamp;

BEGIN create_report(t_begin, v_cur);

INSERT INTO
    reports_logs(report_date)
VALUES
    (v_cur);

END report;

PROCEDURE report IS v_begin timestamp := to_timestamp('1/1/1 1:1:1', 'YYYY/MM/DD HH:MI:SS');

v_cur timestamp := systimestamp;

v_count NUMBER;

BEGIN
SELECT
    COUNT(*) INTO v_count
FROM
    reports_logs;

IF (v_count > 0) THEN
SELECT
    report_date INTO v_begin
FROM
    reports_logs
WHERE
    id = (
        SELECT
            MAX(id)
        FROM
            reports_logs
    );

END IF;

create_report(v_begin, v_cur);

INSERT INTO
    reports_logs(report_date)
VALUES
    (v_cur);

END report;

END func_package;
/

-- PROCEDURES FOR MAIN PACKAGE
CREATE
OR REPLACE PROCEDURE rollback_by_date (date_time IN TIMESTAMP) AS v_cur timestamp := systimestamp;

BEGIN
DELETE FROM
    employees;

DELETE FROM
    departments;

DELETE FROM
    organization;

FOR log_ IN (
    SELECT
        *
    FROM
        organization_logs
    WHERE
        change_date <= date_time
    ORDER BY
        action_id
) LOOP IF log_.change_type = 'INSERT' THEN
INSERT INTO
    organization
VALUES
    (
        log_.organization_id,
        log_.organization_name,
        log_.creation_date
    );

ELSIF log_.change_type = 'DELETE' THEN
DELETE FROM
    organization
WHERE
    organization_id = log_.organization_id;

ELSIF log_.change_type = 'UPDATE' THEN
UPDATE
    organization
SET
    organization_id = log_.organization_id,
    organization_name = log_.organization_name,
    creation_date = log_.creation_date
WHERE
    organization_id = log_.organization_id;

END IF;

END LOOP;

FOR log_ IN (
    SELECT
        *
    FROM
        departments_logs
    WHERE
        change_date <= date_time
    ORDER BY
        action_id
) LOOP IF log_.change_type = 'INSERT' THEN
INSERT INTO
    departments
VALUES
    (
        log_.dep_id,
        log_.dep_name,
        log_.organization_id,
        log_.creation_date
    );

ELSIF log_.change_type = 'DELETE' THEN
DELETE FROM
    departments
WHERE
    dep_id = log_.dep_id;

ELSIF log_.change_type = 'UPDATE' THEN
UPDATE
    departments
SET
    dep_id = log_.dep_id,
    dep_name = log_.dep_name,
    organization_id = log_.organization_id,
    creation_date = log_.creation_date
WHERE
    dep_id = log_.dep_id;

END IF;

END LOOP;

FOR log_ IN (
    SELECT
        *
    FROM
        employees_logs
    WHERE
        change_date <= date_time
    ORDER BY
        action_id
) LOOP IF log_.change_type = 'INSERT' THEN
INSERT INTO
    employees
VALUES
    (
        log_.emp_id,
        log_.emp_name,
        log_.dep_id,
        log_.enter_date
    );

ELSIF log_.change_type = 'DELETE' THEN
DELETE FROM
    employees
WHERE
    emp_id = log_.emp_id;

ELSIF log_.change_type = 'UPDATE' THEN
UPDATE
    employees
SET
    emp_id = log_.emp_id,
    emp_name = log_.emp_name,
    dep_id = log_.dep_id,
    enter_date = log_.enter_date
WHERE
    emp_id = log_.emp_id;

END IF;

END LOOP;

DELETE FROM
    organization_logs
WHERE
    change_date >= v_cur;

DELETE FROM
    departments_logs
WHERE
    change_date >= v_cur;

DELETE FROM
    employees_logs
WHERE
    change_date >= v_cur;

cur_state_timestamp_pkg.set_time(date_time);

END;
/

CREATE
OR REPLACE PROCEDURE create_report(t_begin IN TIMESTAMP, t_end IN TIMESTAMP) AS v_result VARCHAR2(4000);

i_count NUMBER;

u_count NUMBER;

d_count NUMBER;

v_t_end TIMESTAMP := LEAST(t_end, cur_state_timestamp_pkg.cur_state_time);

BEGIN v_result := '<table>
                      <tr>
                        <th>Table</th>
                        <th>INSERT</th>
                        <th>UPDATE</th>
                        <th>DELETE</th>
                      </tr>
                      ';

SELECT
    COUNT(*) INTO u_count
FROM
    organization_logs
WHERE
    change_date BETWEEN t_begin
    AND v_t_end
    AND change_type = 'UPDATE';

SELECT
    COUNT(*) INTO i_count
FROM
    organization_logs
WHERE
    change_date BETWEEN t_begin
    AND v_t_end
    AND change_type = 'INSERT';

SELECT
    COUNT(*) INTO d_count
FROM
    organization_logs
WHERE
    change_date BETWEEN t_begin
    AND v_t_end
    AND change_type = 'DELETE';

v_result := v_result || '<tr>
                               <td>organization</td>
                               <td>' || i_count || '</td>
                               <td>' || u_count || '</td>
                               <td>' || d_count || '</td>
                             </tr>
                              ';

SELECT
    COUNT(*) INTO u_count
FROM
    departments_logs
WHERE
    change_date BETWEEN t_begin
    AND v_t_end
    AND change_type = 'UPDATE';

SELECT
    COUNT(*) INTO i_count
FROM
    departments_logs
WHERE
    change_date BETWEEN t_begin
    AND v_t_end
    AND change_type = 'INSERT';

SELECT
    COUNT(*) INTO d_count
FROM
    departments_logs
WHERE
    change_date BETWEEN t_begin
    AND v_t_end
    AND change_type = 'DELETE';

v_result := v_result || '<tr>
                               <td>departments</td>
                               <td>' || i_count || '</td>
                               <td>' || u_count || '</td>
                               <td>' || d_count || '</td>
                             </tr>
                              ';

SELECT
    COUNT(*) INTO u_count
FROM
    employees_logs
WHERE
    change_date BETWEEN t_begin
    AND v_t_end
    AND change_type = 'UPDATE';

SELECT
    COUNT(*) INTO i_count
FROM
    employees_logs
WHERE
    change_date BETWEEN t_begin
    AND v_t_end
    AND change_type = 'INSERT';

SELECT
    COUNT(*) INTO d_count
FROM
    employees_logs
WHERE
    change_date BETWEEN t_begin
    AND v_t_end
    AND change_type = 'DELETE';

v_result := v_result || '<tr>
                               <td>employees</td>
                               <td>' || i_count || '</td>
                               <td>' || u_count || '</td>
                               <td>' || d_count || '</td>
                             </tr>
                              ';

v_result := v_result || '</table>';

dbms_output.put_line(v_result);

END;
/

